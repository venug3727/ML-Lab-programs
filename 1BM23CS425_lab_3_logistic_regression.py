# -*- coding: utf-8 -*-
"""1BM23CS425_Lab-3-Logistic-Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p3iT7Rb5fc2HdW7eIvOcYVMUgCNIBScW
"""

import pandas as pd
from matplotlib import pyplot as plt

df=pd.read_csv("/content/HR_comma_sep.csv")
df.isnull().sum()

plt.xlabel("")

# prompt: plot bar charts showing impact of employee salaris on retantion

import matplotlib.pyplot as plt
import pandas as pd
from matplotlib import pyplot as plt

# Assuming df is already loaded as in the previous example
# df=pd.read_csv("/content/HR_comma_sep.csv")
# df.isnull().sum()

left_emp = df[df['left']==1]
retained_emp = df[df['left']==0]

plt.figure(figsize=(10,5))
plt.hist(left_emp['satisfaction_level'], alpha=0.5, label='Employees who left')
plt.hist(retained_emp['satisfaction_level'], alpha=0.5, label='Employees who retained')
plt.xlabel('Satisfaction Level')
plt.ylabel('Number of Employees')
plt.title("Impact of Employee Satisfaction on Retention")
plt.legend(loc='upper right')
plt.show()

plt.figure(figsize=(10,5))
plt.hist(left_emp['salary'], alpha=0.5, label='Employees who left')
plt.hist(retained_emp['salary'], alpha=0.5, label='Employees who retained')
plt.xlabel('Salary')
plt.ylabel('Number of Employees')
plt.title("Impact of Employee Salary on Retention")
plt.legend(loc='upper right')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score


"""Performs EDA and identifies key variables affecting retention."""
print("Data Overview:")
print(df.head())
print("\nData Info:")
print(df.info())
print("\nDescriptive Statistics:")
print(df.describe())

"""Plots bar chart showing salary vs. retention."""
pd.crosstab(df['salary'], df['left']).plot(kind='bar')
plt.title("Salary vs. Retention")
plt.show()

pd.crosstab(df['Department'], df['left']).plot(kind='bar')
plt.title("Department vs. Retention")
plt.show()

df_with_dummies = pd.get_dummies(df, columns=['salary'], drop_first=True)  # Convert salary to numerical
df_with_dummies
df_with_dummies = pd.get_dummies(df, columns=['salary', 'Department'], drop_first=True)  # Convert salary and Department to numerical
X = df_with_dummies[["satisfaction_level",	"last_evaluation",	"number_project",	"average_montly_hours"	,"time_spend_company",	"Work_accident",		"promotion_last_5years" ,"salary_low","salary_medium", 'Department_RandD', 'Department_accounting', 'Department_hr', 'Department_management', 'Department_marketing', 'Department_product_mng', 'Department_sales', 'Department_support', 'Department_technical']]  # Include all generated dummy columns for Department
y = df['left']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LogisticRegression(solver='liblinear')
model.fit(X_train, y_train)
model
X_test
y_test

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy}")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns


zoo_data = pd.read_csv("zoo-data.csv")
class_type = pd.read_csv("zoo-class-type.csv")


zoo_data = zoo_data.drop(columns=["animal_name"])


X = zoo_data.drop(columns=["class_type"])
y = zoo_data["class_type"]


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)


model = LogisticRegression(multi_class="multinomial", solver="lbfgs", max_iter=100)
model.fit(X_train_scaled, y_train)


y_pred = model.predict(X_test_scaled)


accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")


conf_matrix = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(8,6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=class_type["Class_Type"], yticklabels=class_type["Class_Type"])
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title(f"Confusion Matrix (Accuracy: {accuracy:.2f})")
plt.show()